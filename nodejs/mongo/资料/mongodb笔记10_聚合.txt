$match：匹配条件，可选，过滤条件 
$limit：结果条数，可选 
$group：聚合规则 
$sort：对查询结果排序，-1表示降序 
 
db.createCollection("course") 
db.course.insert({uid:1,name:'张三',cid:1,course:'英语',score:72}); 
db.course.insert({uid:1,name:'张三',cid:2,course:'数学',score:98}); 
db.course.insert({uid:1,name:'张三',cid:3,course:'物理',score:63}); 
db.course.insert({uid:1,name:'张三',cid:4,course:'化学',score:45}); 
 
db.course.insert({uid:2,name:'李四',cid:1,course:'英语',score:63}); 
db.course.insert({uid:2,name:'李四',cid:2,course:'数学',score:72}); 
db.course.insert({uid:2,name:'李四',cid:3,course:'物理',score:42}); 
db.course.insert({uid:2,name:'李四',cid:4,course:'化学',score:88}); 
db.course.insert({uid:2,name:'李四',cid:5,course:'生物',score:66}); 
 
db.course.insert({uid:3,name:'王五',cid:1,course:'英语',score:94}); 
db.course.insert({uid:3,name:'王五',cid:2,course:'数学',score:62}); 
db.course.insert({uid:3,name:'王五',cid:3,course:'物理',score:85}); 
db.course.insert({uid:3,name:'王五',cid:4,course:'化学',score:52}); 
db.course.insert({uid:3,name:'王五',cid:5,course:'生物',score:90}); 
 
1.每个学生参考几门： 
db.course.aggregate([{$group : {_id : "$uid", 科目数 : {$sum : 1}}},{$sort:{_id:1}}])   
db.course.aggregate([{$group : {_id : {uid:"$uid",name:"$name"}, 科目数 : {$sum : 1}}},{$sort:{_id:1}}]) 
2.每个学生的总成绩 
db.course.aggregate([{$group : {_id : {uid:"$uid",name:"$name"}, course : {$sum : '$score'}}},{$sort:{_id:1}}]) 
3.每个学生的平均成绩 
db.course.aggregate([{$group : {_id : {uid:"$uid",name:"$name"}, course : {$avg : '$score'}}},{$sort:{_id:1}}]) 
4.每个及格的学生的平均成绩 
db.course.aggregate([{$match:{score:{$gt:60, $lte: 90}}},{$group : {_id : {uid:"$uid",name:"$name"}, course : {$avg : '$score'}}},{$sort:{_id:1}}])  //$match必须放在前面 
5.每门课程的平均分 
db.course.aggregate([{$group : {_id : {课程id:"$cid",课程:"$course"}, course : {$avg : '$score'}}},{$sort:{_id:1}}]) 
6.只显示两条 
db.course.aggregate([{$group : {_id : {课程id:"$cid",课程:"$course"}, course : {$avg : '$score'}}},{$sort:{_id:1}},{$limit:2}]) 
 
 db.course.aggregate([{$group : {_id : {课程id:"$cid",课程:"$course"}, course :{$avg : '$score'}}},{$sort:{_id:1}},{$skip:1},{$limit:2}]) //$skip放前面 
 
db.createCollection("ball")  
  
db.ball.insert({"uid":1,"ballid":1})  
db.ball.insert({"uid":1,"ballid":2})  
db.ball.insert({"uid":2,"ballid":1})  
db.ball.insert({"uid":2,"ballid":3})  
db.ball.insert({"uid":2,"ballid":2})  
  
//每种球被几个用户所选  
db.ball.aggregate([{$group : {_id : "$ballid", num_tutorial : {$sum : 1}}}])  
//每个用户选了几种球  
db.ball.aggregate([{$group : {_id : "$uid", num_tutorial : {$sum : 1}}}])  
  
参数：  
$sum 总结从集合中的所有文件所定义的值. 
$avg 从所有文档集合中所有给定值计算的平均.
$min 获取集合中的所有文件中的相应值最小.
$max 获取集合中的所有文件中的相应值的最大. 
$push 值插入到一个数组生成文档中. db.mycol.aggregate([{$group : {_id : "$by_user", url : {$push: "$url"}}}])   
$addToSet 值插入到一个数组中所得到的文档，但不会创建重复. db.mycol.aggregate([{$group : {_id : "$by_user", url : {$addToSet : "$url"}}}])   
$first 根据分组从源文档中获取的第一个文档。通常情况下，这才有意义，连同以前的一些应用 “$sort”-stage. db.mycol.aggregate([{$group : {_id : "$by_user", first_url : {$first : "$url"}}}])   
$last 根据分组从源文档中获取最后的文档。通常，这才有意义，连同以前的一些应用 “$sort”-stage. db.mycol.aggregate([{$group : {_id : "$by_user", last_url : {$last : "$url"}}}])   